import { headers } from "next/headers";
import createClient from "openapi-fetch";

import { db } from "@/db";
import { auth } from "@/zap/lib/auth/server";

import type { paths } from "./gateway"; // generated by openapi-typescript

export function createGatewayServiceClient() {
  return createClient<paths>({
    baseUrl: process.env.GATEWAY_URL,
    headers: {
      Authorization: `Bearer ${process.env.GATEWAY_SERVICE_TOKEN}`,
    },
  });
}
interface ICreateGatewayUserClientByAccessToken {
  accessToken: string;
}
export function createGatewayUserClientByAccessToken(
  p: ICreateGatewayUserClientByAccessToken,
) {
  return createClient<paths>({
    baseUrl: process.env.GATEWAY_URL,
    headers: {
      Authorization: `Bearer ${p.accessToken}`,
    },
  });
}

export async function createUserClient() {
  const session = await auth.api.getSession({
    headers: await headers(), // you need to pass the headers object.
  });
  if (!session) {
    throw new Error("User is not authenticated");
  }
  const userId = session.user.id;
  const gatewayAccount = await db.query.account.findFirst({
    where: (account, { eq, and }) =>
      and(eq(account.userId, userId), eq(account.providerId, "gateway")),
    columns: {
      accessToken: true,
    },
  });
  return createClient<paths>({
    baseUrl: process.env.NEXT_PUBLIC_GATEWAY_URL,
    headers: {
      Authorization: `Bearer ${gatewayAccount!.accessToken}`,
    },
  });
}
