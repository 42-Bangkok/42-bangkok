/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/account/auths/login/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Post Login
     * @description Log in using an access token; creates a session and user if not present.
     */
    post: operations["appaccount_routes_auths_post_login"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/account/auths/login-trusted/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Post Login Trusted
     * @description Login through API. This trust service has validated the user. It creates a session, and a user if not exist.
     */
    post: operations["appaccount_routes_auths_post_login_trusted"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/account/auths/logout/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Post Logout
     * @description Logout given access_token, session is destroyed.
     */
    post: operations["appaccount_routes_auths_post_logout"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/account/auths/refresh/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Post Refresh
     * @description Refresh access_token using refresh_token.
     */
    post: operations["appaccount_routes_auths_post_refresh"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/account/users/me/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Me
     * @description Get current user profile
     */
    get: operations["appaccount_routes_users_get_me"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Patch Me
     * @description Patch current user profile
     */
    patch: operations["appaccount_routes_users_patch_me"];
    trace?: never;
  };
  "/api/demo/demo/form-action-upload/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Post Form Action Upload
     * @description Demo for uploading file using multipart/form-data.
     *     See: http://localhost:3000/demo/form-action-upload
     */
    post: operations["appdemo_routes_demos_post_form_action_upload"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/demo/demo/authenticated-sync-route/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Authenticated Sync Route */
    get: operations["appdemo_routes_demos_get_authenticated_sync_route"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/demo/demo/authenticated-async-route/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Authenticated Async Route
     * @description Sample for ABearerTokenAuth and further queries in async route.
     */
    get: operations["appdemo_routes_demos_get_authenticated_async_route"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/demo/demo/produce-fast-stream/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Post Produce Fast Stream
     * @description Endpoint to produce a message to the fast stream in the demo queue.
     *     Note: depending on the security requirements, send UUID linked to data or actual payload.
     */
    post: operations["appdemo_routes_demos_post_produce_fast_stream"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** LoginPostOut */
    LoginPostOut: {
      /** Access Token */
      access_token: string;
      /** Expires In */
      expires_in: number;
      /** Refresh Token */
      refresh_token: string;
      /** Refresh Token Expires In */
      refresh_token_expires_in: number;
    };
    /** LoginPostIn */
    LoginPostIn: {
      /** Access Token */
      access_token: string;
      /**
       * Provider
       * @constant
       */
      provider: "google";
    };
    /** LoginTrustedPostIn */
    LoginTrustedPostIn: {
      /** Uid */
      uid: string;
      /**
       * Email
       * @description Email of the user
       */
      email?: string | null;
      /**
       * Provider
       * @constant
       */
      provider: "google";
    };
    /** RefreshPostOut */
    RefreshPostOut: {
      /** Access Token */
      access_token: string;
      /** Expires In */
      expires_in: number;
      /** Refresh Token */
      refresh_token: string;
    };
    /** RefreshPostIn */
    RefreshPostIn: {
      /** Refresh Token */
      refresh_token: string;
    };
    /** MeGetOut */
    MeGetOut: {
      user: components["schemas"]["UserSchema"];
      user_profile: components["schemas"]["UserProfileSchema"];
    };
    /** UserProfileSchema */
    UserProfileSchema: {
      /**
       * Created
       * Format: date-time
       */
      created: string;
      /**
       * Updated
       * Format: date-time
       */
      updated: string;
      /**
       * First Name
       * @default
       */
      first_name: string;
      /**
       * Last Name
       * @default
       */
      last_name: string;
      /** Gender */
      gender?: string | null;
      /** Dob */
      dob?: string | null;
    };
    /** UserSchema */
    UserSchema: {
      /** Id */
      id?: string | null;
      /**
       * Username
       * @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
       */
      username: string;
      /** Email Address */
      email?: string | null;
    };
    /** MePatchOut */
    MePatchOut: {
      user: components["schemas"]["UserSchema"];
      user_profile: components["schemas"]["UserProfileSchema"];
    };
    /** MePatchIn */
    MePatchIn: {
      /** Username */
      username?: string | null;
      /**
       * First Name
       * @default
       */
      first_name: string;
      /**
       * Last Name
       * @default
       */
      last_name: string;
      /** Gender */
      gender?: string | null;
      /** Dob */
      dob?: string | null;
    };
    /** SvActFormFileDemoPostIn */
    SvActFormFileDemoPostIn: {
      /** Name */
      name: string;
    };
    /** UserSchema2 */
    UserSchema2: {
      /** Last Login */
      last_login?: string | null;
      /**
       * Superuser Status
       * @description Designates that this user has all permissions without explicitly assigning them.
       * @default false
       */
      is_superuser: boolean;
      /**
       * Username
       * @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
       */
      username: string;
      /** First Name */
      first_name?: string | null;
      /** Last Name */
      last_name?: string | null;
      /** Email Address */
      email?: string | null;
      /**
       * Staff Status
       * @description Designates whether the user can log into this admin site.
       * @default false
       */
      is_staff: boolean;
      /**
       * Active
       * @description Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
       * @default true
       */
      is_active: boolean;
      /**
       * Date Joined
       * Format: date-time
       */
      date_joined?: string;
      /** Id */
      id?: string | null;
      /**
       * Realtime Exchange
       * Format: uuid
       */
      realtime_exchange?: string;
      /**
       * Groups
       * @description The groups this user belongs to. A user will get all permissions granted to each of their groups.
       */
      groups: number[];
      /**
       * User Permissions
       * @description Specific permissions for this user.
       */
      user_permissions: number[];
    };
    /**
     * ProduceFastStreamPostIn
     * @description Schema for the produce fast stream endpoint.
     */
    ProduceFastStreamPostIn: {
      /** Message */
      message: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  appaccount_routes_auths_post_login: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginPostIn"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LoginPostOut"];
        };
      };
    };
  };
  appaccount_routes_auths_post_login_trusted: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginTrustedPostIn"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LoginPostOut"];
        };
      };
    };
  };
  appaccount_routes_auths_post_logout: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  appaccount_routes_auths_post_refresh: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RefreshPostIn"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RefreshPostOut"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  appaccount_routes_users_get_me: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MeGetOut"];
        };
      };
    };
  };
  appaccount_routes_users_patch_me: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MePatchIn"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MePatchOut"];
        };
      };
    };
  };
  appdemo_routes_demos_post_form_action_upload: {
    parameters: {
      query?: {
        file?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Name */
          name: string;
        };
      };
    };
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  appdemo_routes_demos_get_authenticated_sync_route: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserSchema2"];
        };
      };
    };
  };
  appdemo_routes_demos_get_authenticated_async_route: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserSchema2"];
        };
      };
    };
  };
  appdemo_routes_demos_post_produce_fast_stream: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProduceFastStreamPostIn"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
